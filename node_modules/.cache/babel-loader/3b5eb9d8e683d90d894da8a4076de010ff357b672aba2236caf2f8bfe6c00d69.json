{"ast":null,"code":"import{useState}from\"react\";import toast from\"react-hot-toast\";import Button from'@mui/material/Button';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CifradoCesar=()=>{const[message,setMessage]=useState('');// Estado para el mensaje ingresado\nconst[shift,setShift]=useState(0);// Estado para la clave de desplazamiento\nconst[outputMessage,setOutputMessage]=useState('');// Estado para el mensaje cifrado o descifrado\n// Función para aplicar el Cifrado César (cifrado o descifrado)\nconst caesarCipher=(str,shift,isEncrypting)=>{const direction=isEncrypting?1:-1;// Definir dirección para cifrar o descifrar\nreturn str.split('').map(char=>{if(/[a-zA-Z]/.test(char)){const base=char===char.toLowerCase()?97:65;// Código ASCII de 'a' o 'A'\nreturn String.fromCharCode((char.charCodeAt(0)-base+direction*shift+26)%26+base);}return char;// Devolver otros caracteres (como espacios o símbolos) sin modificar\n}).join('');};// Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\nconst handleAction=isEncrypting=>{if(!message.trim()){toast.error(\"El mensaje no puede estar vacío\");return;}const parsedShift=parseInt(shift,10);if(isNaN(parsedShift)||parsedShift<1){toast.error(\"La clave debe ser un número mayor que 0\");return;}const result=caesarCipher(message,parsedShift,isEncrypting);setOutputMessage(result);toast.success(isEncrypting?\"Mensaje cifrado correctamente!\":\"Mensaje descifrado correctamente!\");};// Función para copiar el mensaje\nconst handleCopy=()=>{if(!outputMessage){toast.error(\"No hay mensaje para copiar\");return;}navigator.clipboard.writeText(outputMessage);toast.success('Mensaje copiado correctamente!');};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:\"20px\",textAlign:\"center\"},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Cifrado C\\xE9sar\"}),/*#__PURE__*/_jsx(\"text\",{children:\"Ingresa el mensaje:\"}),/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:\"20px\"},children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Ej: Hola\",value:message,onChange:e=>setMessage(e.target.value),style:{padding:\"10px\",width:\"300px\",fontSize:\"16px\"}})}),/*#__PURE__*/_jsx(\"text\",{children:\"Cantidad de desplazamiento:\"}),/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:\"20px\"},children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Clave (desplazamiento)\",value:shift,onChange:e=>setShift(e.target.value),style:{padding:\"10px\",width:\"300px\",fontSize:\"16px\"}})}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:\"20px\"},children:[/*#__PURE__*/_jsx(Button,{onClick:()=>handleAction(true)// Pasamos true para cifrar\n,variant:\"contained\",color:\"primary\",style:{marginRight:\"10px\"},children:\"Cifrar Mensaje\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>handleAction(false)// Pasamos false para descifrar\n,variant:\"contained\",color:\"secondary\",children:\"Descifrar Mensaje\"})]}),/*#__PURE__*/_jsx(\"text\",{children:\"Mensaje Cifrado / Descifrado\"}),outputMessage&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:\"20px\"},children:[/*#__PURE__*/_jsx(\"textarea\",{readOnly:true,value:outputMessage,style:{width:\"300px\",height:\"100px\",padding:\"10px\",fontSize:\"16px\",resize:\"none\",border:\"1px solid #ccc\",borderRadius:\"4px\",marginBottom:\"10px\"}}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Button,{onClick:handleCopy,variant:\"contained\",color:\"success\",children:\"Copiar\"})})]})]});};export{CifradoCesar};","map":{"version":3,"names":["useState","toast","Button","jsx","_jsx","jsxs","_jsxs","CifradoCesar","message","setMessage","shift","setShift","outputMessage","setOutputMessage","caesarCipher","str","isEncrypting","direction","split","map","char","test","base","toLowerCase","String","fromCharCode","charCodeAt","join","handleAction","trim","error","parsedShift","parseInt","isNaN","result","success","handleCopy","navigator","clipboard","writeText","style","padding","textAlign","children","marginBottom","type","placeholder","value","onChange","e","target","width","fontSize","onClick","variant","color","marginRight","marginTop","readOnly","height","resize","border","borderRadius"],"sources":["C:/Users/Luis Ibarra/Documents/Tareas/Seguridad informatica/webCifrado/cifrado/src/CifradoCesar.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport Button from '@mui/material/Button';\r\n\r\nconst CifradoCesar = () => {\r\n    const [message, setMessage] = useState(''); // Estado para el mensaje ingresado\r\n    const [shift, setShift] = useState(0); // Estado para la clave de desplazamiento\r\n    const [outputMessage, setOutputMessage] = useState(''); // Estado para el mensaje cifrado o descifrado\r\n\r\n    // Función para aplicar el Cifrado César (cifrado o descifrado)\r\n    const caesarCipher = (str, shift, isEncrypting) => {\r\n        const direction = isEncrypting ? 1 : -1; // Definir dirección para cifrar o descifrar\r\n        return str\r\n        .split('')\r\n        .map((char) => {\r\n            if (/[a-zA-Z]/.test(char)) {\r\n                const base = char === char.toLowerCase() ? 97 : 65; // Código ASCII de 'a' o 'A'\r\n                return String.fromCharCode(\r\n                    ((char.charCodeAt(0) - base + direction * shift + 26) % 26) + base\r\n                );\r\n            }\r\n            return char; // Devolver otros caracteres (como espacios o símbolos) sin modificar\r\n        })\r\n        .join('');\r\n    };\r\n\r\n    // Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\r\n    const handleAction = (isEncrypting) => {\r\n        if (!message.trim()) {\r\n            toast.error(\"El mensaje no puede estar vacío\");\r\n            return;\r\n        }\r\n\r\n        const parsedShift = parseInt(shift, 10);\r\n        if (isNaN(parsedShift) || parsedShift < 1) {\r\n            toast.error(\"La clave debe ser un número mayor que 0\");\r\n            return;\r\n        }\r\n\r\n        const result = caesarCipher(message, parsedShift, isEncrypting);\r\n        setOutputMessage(result);\r\n        toast.success(isEncrypting ? \"Mensaje cifrado correctamente!\" : \"Mensaje descifrado correctamente!\");\r\n    };\r\n\r\n    // Función para copiar el mensaje\r\n    const handleCopy = () => {\r\n        if (!outputMessage) {\r\n            toast.error(\"No hay mensaje para copiar\");\r\n            return;\r\n        }\r\n        navigator.clipboard.writeText(outputMessage);\r\n        toast.success('Mensaje copiado correctamente!');\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: \"20px\", textAlign: \"center\" }}>\r\n            <h1>Cifrado César</h1>\r\n            <text>Ingresa el mensaje:</text>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Ej: Hola\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <text>Cantidad de desplazamiento:</text>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"Clave (desplazamiento)\"\r\n                    value={shift}\r\n                    onChange={(e) => setShift(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <Button\r\n                    onClick={() => handleAction(true)} // Pasamos true para cifrar\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{ marginRight: \"10px\" }}\r\n                >\r\n                    Cifrar Mensaje\r\n                </Button>\r\n                <Button\r\n                    onClick={() => handleAction(false)} // Pasamos false para descifrar\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                >\r\n                    Descifrar Mensaje\r\n                </Button>\r\n            </div>\r\n            <text>Mensaje Cifrado / Descifrado</text>\r\n            {outputMessage && (\r\n                <div style={{ marginTop: \"20px\" }}>\r\n                    <textarea\r\n                        readOnly\r\n                        value={outputMessage}\r\n                        style={{\r\n                            width: \"300px\",\r\n                            height: \"100px\",\r\n                            padding: \"10px\",\r\n                            fontSize: \"16px\",\r\n                            resize: \"none\",\r\n                            border: \"1px solid #ccc\",\r\n                            borderRadius: \"4px\",\r\n                            marginBottom: \"10px\", \r\n                        }}\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            onClick={handleCopy}\r\n                            variant=\"contained\"\r\n                            color=\"success\"\r\n                        >\r\n                            Copiar\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { CifradoCesar };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}