{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luis Ibarra\\\\Documents\\\\Tareas\\\\Seguridad informatica\\\\webCifrado\\\\cifrado\\\\src\\\\CifradoFormulario.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Button from '@mui/material/Button';\nimport toast from \"react-hot-toast\";\nimport CryptoJS from \"crypto-js\";\nimport blake from 'blakejs';\n\n// Implementación de Rabin (basada en el código proporcionado anteriormente)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRabinKeys = () => {\n  const p = 61;\n  const q = 53;\n  const n = p * q;\n  return {\n    p,\n    q,\n    n\n  };\n};\nconst rabinEncrypt = (message, n) => {\n  const m = BigInt(Buffer.from(message).toString('hex'), 16);\n  const c = m ** 2n % BigInt(n);\n  return c.toString();\n};\nconst rabinDecrypt = (cipher, p, q) => {\n  const n = BigInt(p * q);\n  const c = BigInt(cipher);\n  const mp = modSqrt(c, p);\n  const mq = modSqrt(c, q);\n  const [r1, r2] = chineseRemainderTheorem(mp, mq, p, q, n);\n  return [r1, r2];\n};\nconst modSqrt = (a, p) => {\n  return a ** ((p + 1n) / 4n) % p;\n};\nconst chineseRemainderTheorem = (mp, mq, p, q, n) => {\n  const yp = q * modInverse(q, p);\n  const yq = p * modInverse(p, q);\n  const r1 = (mp * yp + mq * yq) % n;\n  const r2 = (mp * yp - mq * yq) % n;\n  return [r1, r2];\n};\nconst modInverse = (a, m) => {\n  const [g, x] = extendedGcd(a, m);\n  if (g !== 1n) throw new Error('No existe inverso modular');\n  return x % m;\n};\nconst extendedGcd = (a, b) => {\n  if (b === 0n) return [a, 1n, 0n];\n  const [g, x1, y1] = extendedGcd(b, a % b);\n  return [g, y1, x1 - a / b * y1];\n};\nconst CifradoFormulario = () => {\n  _s();\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [password, setPassword] = useState('');\n  const [symmetricKey, setSymmetricKey] = useState('');\n  const [publicKey, setPublicKey] = useState('');\n  const [privateKey, setPrivateKey] = useState('');\n  const [outputMessage, setOutputMessage] = useState('');\n\n  // Cifrado simétrico con RC6\n  const rc6Cipher = (str, key, isEncrypting) => {\n    try {\n      if (isEncrypting) {\n        return CryptoJS.RC6.encrypt(str, key).toString();\n      } else {\n        return CryptoJS.RC6.decrypt(str, key).toString(CryptoJS.enc.Utf8);\n      }\n    } catch (error) {\n      toast.error(\"Error en el cifrado/desbloqueo simétrico\");\n      return '';\n    }\n  };\n  const hashBlake2 = str => {\n    const hash = blake.blake2b(str);\n    return Buffer.from(hash).toString('hex');\n  };\n  const handleEncryption = () => {\n    if (!name.trim() || !address.trim() || !password.trim()) {\n      toast.error(\"Por favor ingrese todos los campos\");\n      return;\n    }\n    if (!symmetricKey.trim() || !publicKey.trim()) {\n      toast.error(\"Por favor ingrese las claves\");\n      return;\n    }\n    const encryptedName = rc6Cipher(name, symmetricKey, true);\n    const encryptedAddress = rc6Cipher(address, symmetricKey, true);\n    const encryptedPassword = rabinEncrypt(password, publicKey);\n    const hashedPassword = hashBlake2(password);\n    setOutputMessage(`Nombre cifrado (RC6): ${encryptedName}\\n` + `Dirección cifrada (RC6): ${encryptedAddress}\\n` + `Contraseña cifrada (Rabin): ${encryptedPassword}\\n` + `Contraseña hashed (Blake2): ${hashedPassword}`);\n  };\n  const handleDecryption = () => {\n    if (!symmetricKey.trim() || !privateKey.trim()) {\n      toast.error(\"Por favor ingrese las claves\");\n      return;\n    }\n    try {\n      const decryptedName = rc6Cipher(outputMessage.name, symmetricKey, false);\n      const decryptedAddress = rc6Cipher(outputMessage.address, symmetricKey, false);\n      const decryptedPassword = rabinDecrypt(outputMessage.password, privateKey);\n      setOutputMessage(`Nombre descifrado: ${decryptedName}\\n` + `Dirección descifrada: ${decryptedAddress}\\n` + `Contraseña descifrada: ${decryptedPassword}`);\n    } catch (error) {\n      toast.error(\"Error al descifrar los datos\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      textAlign: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Formulario de Cifrado y Hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(CifradoFormulario, \"CmOJAC4/gAd5ntpZH2dRw/0Nydw=\");\n_c = CifradoFormulario;\nexport { CifradoFormulario };\nvar _c;\n$RefreshReg$(_c, \"CifradoFormulario\");","map":{"version":3,"names":["useState","Button","toast","CryptoJS","blake","jsxDEV","_jsxDEV","generateRabinKeys","p","q","n","rabinEncrypt","message","m","BigInt","Buffer","from","toString","c","rabinDecrypt","cipher","mp","modSqrt","mq","r1","r2","chineseRemainderTheorem","a","yp","modInverse","yq","g","x","extendedGcd","Error","b","x1","y1","CifradoFormulario","_s","name","setName","address","setAddress","password","setPassword","symmetricKey","setSymmetricKey","publicKey","setPublicKey","privateKey","setPrivateKey","outputMessage","setOutputMessage","rc6Cipher","str","key","isEncrypting","RC6","encrypt","decrypt","enc","Utf8","error","hashBlake2","hash","blake2b","handleEncryption","trim","encryptedName","encryptedAddress","encryptedPassword","hashedPassword","handleDecryption","decryptedName","decryptedAddress","decryptedPassword","style","padding","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Luis Ibarra/Documents/Tareas/Seguridad informatica/webCifrado/cifrado/src/CifradoFormulario.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Button from '@mui/material/Button';\r\nimport toast from \"react-hot-toast\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport blake from 'blakejs';\r\n\r\n// Implementación de Rabin (basada en el código proporcionado anteriormente)\r\nconst generateRabinKeys = () => {\r\n    const p = 61;\r\n    const q = 53;\r\n    const n = p * q;\r\n    return { p, q, n };\r\n};\r\n\r\nconst rabinEncrypt = (message, n) => {\r\n    const m = BigInt(Buffer.from(message).toString('hex'), 16);\r\n    const c = (m ** 2n) % BigInt(n);\r\n    return c.toString();\r\n};\r\n\r\nconst rabinDecrypt = (cipher, p, q) => {\r\n    const n = BigInt(p * q);\r\n    const c = BigInt(cipher);\r\n    const mp = modSqrt(c, p);\r\n    const mq = modSqrt(c, q);\r\n    const [r1, r2] = chineseRemainderTheorem(mp, mq, p, q, n);\r\n    return [r1, r2];\r\n};\r\n\r\nconst modSqrt = (a, p) => {\r\n    return a ** ((p + 1n) / 4n) % p;\r\n};\r\n\r\nconst chineseRemainderTheorem = (mp, mq, p, q, n) => {\r\n    const yp = q * modInverse(q, p);\r\n    const yq = p * modInverse(p, q);\r\n    const r1 = (mp * yp + mq * yq) % n;\r\n    const r2 = (mp * yp - mq * yq) % n;\r\n    return [r1, r2];\r\n};\r\n\r\nconst modInverse = (a, m) => {\r\n    const [g, x] = extendedGcd(a, m);\r\n    if (g !== 1n) throw new Error('No existe inverso modular');\r\n    return x % m;\r\n};\r\n\r\nconst extendedGcd = (a, b) => {\r\n    if (b === 0n) return [a, 1n, 0n];\r\n    const [g, x1, y1] = extendedGcd(b, a % b);\r\n    return [g, y1, x1 - (a / b) * y1];\r\n};\r\n\r\nconst CifradoFormulario = () => {\r\n    const [name, setName] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [symmetricKey, setSymmetricKey] = useState('');\r\n    const [publicKey, setPublicKey] = useState('');\r\n    const [privateKey, setPrivateKey] = useState('');\r\n    const [outputMessage, setOutputMessage] = useState('');\r\n\r\n    // Cifrado simétrico con RC6\r\n    const rc6Cipher = (str, key, isEncrypting) => {\r\n        try {\r\n            if (isEncrypting) {\r\n                return CryptoJS.RC6.encrypt(str, key).toString();\r\n            } else {\r\n                return CryptoJS.RC6.decrypt(str, key).toString(CryptoJS.enc.Utf8);\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Error en el cifrado/desbloqueo simétrico\");\r\n            return '';\r\n        }\r\n    };\r\n\r\n    const hashBlake2 = (str) => {\r\n        const hash = blake.blake2b(str);\r\n        return Buffer.from(hash).toString('hex');\r\n    };\r\n\r\n    const handleEncryption = () => {\r\n        if (!name.trim() || !address.trim() || !password.trim()) {\r\n            toast.error(\"Por favor ingrese todos los campos\");\r\n            return;\r\n        }\r\n        if (!symmetricKey.trim() || !publicKey.trim()) {\r\n            toast.error(\"Por favor ingrese las claves\");\r\n            return;\r\n        }\r\n\r\n        const encryptedName = rc6Cipher(name, symmetricKey, true);\r\n        const encryptedAddress = rc6Cipher(address, symmetricKey, true);\r\n        const encryptedPassword = rabinEncrypt(password, publicKey);\r\n        const hashedPassword = hashBlake2(password);\r\n\r\n        setOutputMessage(\r\n            `Nombre cifrado (RC6): ${encryptedName}\\n` +\r\n            `Dirección cifrada (RC6): ${encryptedAddress}\\n` +\r\n            `Contraseña cifrada (Rabin): ${encryptedPassword}\\n` +\r\n            `Contraseña hashed (Blake2): ${hashedPassword}`\r\n        );\r\n    };\r\n\r\n    const handleDecryption = () => {\r\n        if (!symmetricKey.trim() || !privateKey.trim()) {\r\n            toast.error(\"Por favor ingrese las claves\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const decryptedName = rc6Cipher(outputMessage.name, symmetricKey, false);\r\n            const decryptedAddress = rc6Cipher(outputMessage.address, symmetricKey, false);\r\n            const decryptedPassword = rabinDecrypt(outputMessage.password, privateKey);\r\n\r\n            setOutputMessage(\r\n                `Nombre descifrado: ${decryptedName}\\n` +\r\n                `Dirección descifrada: ${decryptedAddress}\\n` +\r\n                `Contraseña descifrada: ${decryptedPassword}`\r\n            );\r\n        } catch (error) {\r\n            toast.error(\"Error al descifrar los datos\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: \"20px\", textAlign: \"center\" }}>\r\n            <h1>Formulario de Cifrado y Hash</h1>\r\n            {/* Formulario y demás código de renderizado aquí */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { CifradoFormulario };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}