{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luis Ibarra\\\\Documents\\\\Tareas\\\\Seguridad informatica\\\\webCifrado\\\\cifrado\\\\src\\\\CifradoFormulario.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Button from '@mui/material/Button';\nimport toast from \"react-hot-toast\";\nimport blake from 'blakejs';\n\n// Función para convertir una cadena a hexadecimal\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst toHex = byteArray => {\n  return Array.from(byteArray, byte => {\n    return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n  }).join('');\n};\n\n// Función para ajustar la clave a un tamaño de 16 bytes (128 bits) si es necesario\nconst adjustKeyLength = key => {\n  const encoder = new TextEncoder();\n  let keyBytes = encoder.encode(key);\n\n  // Si la clave es menor que 16 bytes, la rellenamos con ceros\n  if (keyBytes.length < 16) {\n    const paddedKey = new Uint8Array(16);\n    paddedKey.set(keyBytes);\n    keyBytes = paddedKey;\n  }\n\n  // Si la clave es mayor que 16 bytes, la truncamos\n  if (keyBytes.length > 16) {\n    keyBytes = keyBytes.slice(0, 16);\n  }\n  return keyBytes;\n};\n\n// Implementación de RC6 en JavaScript usando DataView\nconst w = 32; // Tamaño de palabra (32 bits)\nconst r = 20; // Número de rondas recomendado\nconst lgw = Math.log2(w); // Log base 2 del tamaño de palabra\nconst mod = 2 ** w; // Módulo para operaciones de 32 bits\n\n// Generación de claves para RC6\nconst generateKeySchedule = K => {\n  const P32 = 0xB7E15163;\n  const Q32 = 0x9E3779B9;\n  const t = 2 * (r + 2);\n  const S = new Array(t);\n  S[0] = P32;\n  for (let i = 1; i < t; i++) {\n    S[i] = (S[i - 1] + Q32) % mod;\n  }\n\n  // Usamos DataView para leer enteros de 32 bits\n  const L = [];\n  const KView = new DataView(K.buffer);\n  for (let i = 0; i < K.byteLength / 4; i++) {\n    L[i] = KView.getUint32(i * 4, true); // true para little-endian\n  }\n  let A = 0,\n    B = 0;\n  let i = 0,\n    j = 0;\n  const v = 3 * Math.max(L.length, t);\n  for (let s = 0; s < v; s++) {\n    A = S[i] = rol((S[i] + A + B) % mod, 3);\n    B = L[j] = rol((L[j] + A + B) % mod, (A + B) % w);\n    i = (i + 1) % t;\n    j = (j + 1) % L.length;\n  }\n  return S;\n};\n\n// Rotación a la izquierda\nconst rol = (x, n) => {\n  return (x << n | x >>> w - n) % mod;\n};\n\n// Cifrado RC6\nconst rc6Encrypt = (plaintext, S) => {\n  const encoder = new TextEncoder();\n  const plaintextBytes = encoder.encode(plaintext.padEnd(16, '\\0')); // Asegurar que el texto tenga 16 bytes\n  let A = new DataView(plaintextBytes.buffer).getUint32(0);\n  let B = new DataView(plaintextBytes.buffer).getUint32(4);\n  let C = new DataView(plaintextBytes.buffer).getUint32(8);\n  let D = new DataView(plaintextBytes.buffer).getUint32(12);\n  B = (B + S[0]) % mod;\n  D = (D + S[1]) % mod;\n  for (let i = 1; i <= r; i++) {\n    const t = rol(B * (2 * B + 1) % mod, lgw);\n    const u = rol(D * (2 * D + 1) % mod, lgw);\n    A = (rol(A ^ t, u) + S[2 * i]) % mod;\n    C = (rol(C ^ u, t) + S[2 * i + 1]) % mod;\n    [A, B, C, D] = [B, C, D, A];\n  }\n  A = (A + S[2 * r + 2]) % mod;\n  C = (C + S[2 * r + 3]) % mod;\n  const encrypted = new Uint32Array([A, B, C, D]);\n  return toHex(new Uint8Array(encrypted.buffer)); // Convertir a hexadecimal\n};\n\n// Función de Hash usando Blake2\nconst hashBlake2 = str => {\n  const inputBytes = new TextEncoder().encode(str); // Convertir la cadena en bytes\n  const hash = blake.blake2b(inputBytes); // Generar el hash usando blakejs\n  return toHex(hash); // Convertir el resultado en formato hexadecimal\n};\nconst CifradoFormulario = () => {\n  _s();\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [password, setPassword] = useState('');\n  const [symmetricKey, setSymmetricKey] = useState('');\n  const [publicKey, setPublicKey] = useState('');\n  const [privateKey, setPrivateKey] = useState('');\n  const [outputMessage, setOutputMessage] = useState('');\n  const handleEncryption = () => {\n    if (!name.trim() || !address.trim() || !password.trim()) {\n      toast.error(\"Por favor ingrese todos los campos\");\n      return;\n    }\n    if (!symmetricKey.trim() || !publicKey.trim()) {\n      toast.error(\"Por favor ingrese las claves\");\n      return;\n    }\n    const keyBytes = adjustKeyLength(symmetricKey); // Ajustar la clave a 16 bytes\n    const S = generateKeySchedule(keyBytes);\n\n    // Cifrar usando RC6\n    const encryptedName = rc6Encrypt(name, S);\n    const encryptedAddress = rc6Encrypt(address, S);\n    const hashedPassword = hashBlake2(password);\n    setOutputMessage(`Nombre cifrado (RC6): ${encryptedName}\\n` + `Dirección cifrada (RC6): ${encryptedAddress}\\n` + `Contraseña hashed (Blake2): ${hashedPassword}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Formulario de Cifrado y Hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Nombre\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Direcci\\xF3n\",\n        value: address,\n        onChange: e => setAddress(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Contrase\\xF1a\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Clave Sim\\xE9trica (RC6)\",\n        value: symmetricKey,\n        onChange: e => setSymmetricKey(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleEncryption,\n        variant: \"contained\",\n        color: \"primary\",\n        style: {\n          marginRight: \"10px\"\n        },\n        children: \"Cifrar Datos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: outputMessage && /*#__PURE__*/_jsxDEV(\"textarea\", {\n        readOnly: true,\n        value: outputMessage,\n        style: {\n          width: \"300px\",\n          height: \"200px\",\n          padding: \"10px\",\n          fontSize: \"16px\",\n          resize: \"none\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          marginBottom: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n};\n_s(CifradoFormulario, \"CmOJAC4/gAd5ntpZH2dRw/0Nydw=\");\n_c = CifradoFormulario;\nexport { CifradoFormulario };\nvar _c;\n$RefreshReg$(_c, \"CifradoFormulario\");","map":{"version":3,"names":["useState","Button","toast","blake","jsxDEV","_jsxDEV","toHex","byteArray","Array","from","byte","toString","slice","join","adjustKeyLength","key","encoder","TextEncoder","keyBytes","encode","length","paddedKey","Uint8Array","set","w","r","lgw","Math","log2","mod","generateKeySchedule","K","P32","Q32","t","S","i","L","KView","DataView","buffer","byteLength","getUint32","A","B","j","v","max","s","rol","x","n","rc6Encrypt","plaintext","plaintextBytes","padEnd","C","D","u","encrypted","Uint32Array","hashBlake2","str","inputBytes","hash","blake2b","CifradoFormulario","_s","name","setName","address","setAddress","password","setPassword","symmetricKey","setSymmetricKey","publicKey","setPublicKey","privateKey","setPrivateKey","outputMessage","setOutputMessage","handleEncryption","trim","error","encryptedName","encryptedAddress","hashedPassword","style","padding","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","type","placeholder","value","onChange","e","target","width","fontSize","onClick","variant","color","marginRight","readOnly","height","resize","border","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/Luis Ibarra/Documents/Tareas/Seguridad informatica/webCifrado/cifrado/src/CifradoFormulario.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Button from '@mui/material/Button';\r\nimport toast from \"react-hot-toast\";\r\nimport blake from 'blakejs';\r\n\r\n// Función para convertir una cadena a hexadecimal\r\nconst toHex = (byteArray) => {\r\n    return Array.from(byteArray, (byte) => {\r\n        return ('0' + (byte & 0xFF).toString(16)).slice(-2);\r\n    }).join('');\r\n};\r\n\r\n// Función para ajustar la clave a un tamaño de 16 bytes (128 bits) si es necesario\r\nconst adjustKeyLength = (key) => {\r\n    const encoder = new TextEncoder();\r\n    let keyBytes = encoder.encode(key);\r\n\r\n    // Si la clave es menor que 16 bytes, la rellenamos con ceros\r\n    if (keyBytes.length < 16) {\r\n        const paddedKey = new Uint8Array(16);\r\n        paddedKey.set(keyBytes);\r\n        keyBytes = paddedKey;\r\n    }\r\n\r\n    // Si la clave es mayor que 16 bytes, la truncamos\r\n    if (keyBytes.length > 16) {\r\n        keyBytes = keyBytes.slice(0, 16);\r\n    }\r\n\r\n    return keyBytes;\r\n};\r\n\r\n// Implementación de RC6 en JavaScript usando DataView\r\nconst w = 32; // Tamaño de palabra (32 bits)\r\nconst r = 20; // Número de rondas recomendado\r\nconst lgw = Math.log2(w); // Log base 2 del tamaño de palabra\r\nconst mod = 2 ** w; // Módulo para operaciones de 32 bits\r\n\r\n// Generación de claves para RC6\r\nconst generateKeySchedule = (K) => {\r\n    const P32 = 0xB7E15163;\r\n    const Q32 = 0x9E3779B9;\r\n\r\n    const t = 2 * (r + 2);\r\n    const S = new Array(t);\r\n    S[0] = P32;\r\n    for (let i = 1; i < t; i++) {\r\n        S[i] = (S[i - 1] + Q32) % mod;\r\n    }\r\n\r\n    // Usamos DataView para leer enteros de 32 bits\r\n    const L = [];\r\n    const KView = new DataView(K.buffer);\r\n    for (let i = 0; i < K.byteLength / 4; i++) {\r\n        L[i] = KView.getUint32(i * 4, true); // true para little-endian\r\n    }\r\n\r\n    let A = 0, B = 0;\r\n    let i = 0, j = 0;\r\n    const v = 3 * Math.max(L.length, t);\r\n    for (let s = 0; s < v; s++) {\r\n        A = S[i] = rol((S[i] + A + B) % mod, 3);\r\n        B = L[j] = rol((L[j] + A + B) % mod, (A + B) % w);\r\n        i = (i + 1) % t;\r\n        j = (j + 1) % L.length;\r\n    }\r\n\r\n    return S;\r\n};\r\n\r\n// Rotación a la izquierda\r\nconst rol = (x, n) => {\r\n    return ((x << n) | (x >>> (w - n))) % mod;\r\n};\r\n\r\n// Cifrado RC6\r\nconst rc6Encrypt = (plaintext, S) => {\r\n    const encoder = new TextEncoder();\r\n    const plaintextBytes = encoder.encode(plaintext.padEnd(16, '\\0')); // Asegurar que el texto tenga 16 bytes\r\n    let A = new DataView(plaintextBytes.buffer).getUint32(0);\r\n    let B = new DataView(plaintextBytes.buffer).getUint32(4);\r\n    let C = new DataView(plaintextBytes.buffer).getUint32(8);\r\n    let D = new DataView(plaintextBytes.buffer).getUint32(12);\r\n\r\n    B = (B + S[0]) % mod;\r\n    D = (D + S[1]) % mod;\r\n\r\n    for (let i = 1; i <= r; i++) {\r\n        const t = rol((B * (2 * B + 1)) % mod, lgw);\r\n        const u = rol((D * (2 * D + 1)) % mod, lgw);\r\n        A = (rol(A ^ t, u) + S[2 * i]) % mod;\r\n        C = (rol(C ^ u, t) + S[2 * i + 1]) % mod;\r\n\r\n        [A, B, C, D] = [B, C, D, A];\r\n    }\r\n\r\n    A = (A + S[2 * r + 2]) % mod;\r\n    C = (C + S[2 * r + 3]) % mod;\r\n\r\n    const encrypted = new Uint32Array([A, B, C, D]);\r\n    return toHex(new Uint8Array(encrypted.buffer)); // Convertir a hexadecimal\r\n};\r\n\r\n// Función de Hash usando Blake2\r\nconst hashBlake2 = (str) => {\r\n    const inputBytes = new TextEncoder().encode(str); // Convertir la cadena en bytes\r\n    const hash = blake.blake2b(inputBytes); // Generar el hash usando blakejs\r\n    return toHex(hash); // Convertir el resultado en formato hexadecimal\r\n};\r\n\r\nconst CifradoFormulario = () => {\r\n    const [name, setName] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [symmetricKey, setSymmetricKey] = useState('');\r\n    const [publicKey, setPublicKey] = useState('');\r\n    const [privateKey, setPrivateKey] = useState('');\r\n    const [outputMessage, setOutputMessage] = useState('');\r\n\r\n    const handleEncryption = () => {\r\n        if (!name.trim() || !address.trim() || !password.trim()) {\r\n            toast.error(\"Por favor ingrese todos los campos\");\r\n            return;\r\n        }\r\n        if (!symmetricKey.trim() || !publicKey.trim()) {\r\n            toast.error(\"Por favor ingrese las claves\");\r\n            return;\r\n        }\r\n\r\n        const keyBytes = adjustKeyLength(symmetricKey); // Ajustar la clave a 16 bytes\r\n        const S = generateKeySchedule(keyBytes);\r\n\r\n        // Cifrar usando RC6\r\n        const encryptedName = rc6Encrypt(name, S);\r\n        const encryptedAddress = rc6Encrypt(address, S);\r\n        const hashedPassword = hashBlake2(password);\r\n\r\n        setOutputMessage(\r\n            `Nombre cifrado (RC6): ${encryptedName}\\n` +\r\n            `Dirección cifrada (RC6): ${encryptedAddress}\\n` +\r\n            `Contraseña hashed (Blake2): ${hashedPassword}`\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: \"20px\", textAlign: \"center\" }}>\r\n            <h1>Formulario de Cifrado y Hash</h1>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Nombre\"\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Dirección\"\r\n                    value={address}\r\n                    onChange={(e) => setAddress(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Contraseña\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Clave Simétrica (RC6)\"\r\n                    value={symmetricKey}\r\n                    onChange={(e) => setSymmetricKey(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <Button\r\n                    onClick={handleEncryption}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{ marginRight: \"10px\" }}\r\n                >\r\n                    Cifrar Datos\r\n                </Button>\r\n            </div>\r\n            <div>\r\n                {outputMessage && (\r\n                    <textarea\r\n                        readOnly\r\n                        value={outputMessage}\r\n                        style={{\r\n                            width: \"300px\",\r\n                            height: \"200px\",\r\n                            padding: \"10px\",\r\n                            fontSize: \"16px\",\r\n                            resize: \"none\",\r\n                            border: \"1px solid #ccc\",\r\n                            borderRadius: \"4px\",\r\n                            marginBottom: \"10px\",\r\n                        }}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { CifradoFormulario };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}