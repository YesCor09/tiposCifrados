{"ast":null,"code":"import{useState}from\"react\";import Button from'@mui/material/Button';import toast from\"react-hot-toast\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CifradoEscitala=()=>{const[message,setMessage]=useState('');// Estado para el mensaje ingresado\nconst[key,setKey]=useState(1);// Estado para la clave (número de columnas)\nconst[outputMessage,setOutputMessage]=useState('');// Estado para el mensaje cifrado o descifrado\n// Función para aplicar el Cifrado Escítala\nconst escitalaCipher=(str,numColumns,isEncrypting)=>{const spaceIndexes=[];let normalizedMessage='';// Recorrer el mensaje y separar los espacios\nfor(let i=0;i<str.length;i++){if(str[i]===' '){spaceIndexes.push(i);// Guardar las posiciones de los espacios\n}else{normalizedMessage+=str[i];// Construir mensaje sin espacios\n}}const numRows=Math.ceil(normalizedMessage.length/numColumns);let transformedMessage='';if(isEncrypting){// Cifrar (Escribir por filas, leer por columnas)\nfor(let col=0;col<numColumns;col++){for(let row=0;row<numRows;row++){const index=row*numColumns+col;if(index<normalizedMessage.length){transformedMessage+=normalizedMessage[index];}}}}else{// Descifrar (Escribir por columnas, leer por filas)\nconst decryptedArr=Array.from({length:numRows},()=>\"\");const colLength=Math.floor(normalizedMessage.length/numColumns);const extraChars=normalizedMessage.length%numColumns;let index=0;for(let col=0;col<numColumns;col++){const charsInColumn=col<extraChars?colLength+1:colLength;for(let row=0;row<charsInColumn;row++){if(index<normalizedMessage.length){decryptedArr[row]+=normalizedMessage[index];index++;}}}transformedMessage=decryptedArr.join('');}// Insertar los espacios de vuelta en las posiciones originales\nfor(let spaceIndex of spaceIndexes){transformedMessage=[transformedMessage.slice(0,spaceIndex),' ',transformedMessage.slice(spaceIndex)].join('');}return transformedMessage;};// Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\nconst handleAction=isEncrypting=>{if(!message.trim()){toast.error(\"El mensaje no puede estar vacío\");return;}const parsedKey=parseInt(key,10);if(isNaN(parsedKey)||parsedKey<1){toast.error(\"La clave debe ser un número mayor que 0\");return;}const result=escitalaCipher(message,parsedKey,isEncrypting);setOutputMessage(result);toast.success(isEncrypting?\"Mensaje cifrado correctamente!\":\"Mensaje descifrado correctamente!\");};const handleCopy=()=>{if(!outputMessage){toast.error(\"No hay mensaje para copiar\");return;}navigator.clipboard.writeText(outputMessage);toast.success('Mensaje copiado correctamente!');};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:\"20px\",textAlign:\"center\"},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Cifrado Esc\\xEDtala\"}),/*#__PURE__*/_jsx(\"text\",{children:\"Ingresa el mensaje: \"}),/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:\"20px\"},children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Ej: Hola\",value:message,onChange:e=>setMessage(e.target.value),style:{padding:\"10px\",width:\"300px\",fontSize:\"16px\"}})}),/*#__PURE__*/_jsx(\"text\",{children:\"Ingresa el numero de columnas: \"}),/*#__PURE__*/_jsx(\"div\",{style:{marginBottom:\"20px\"},children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Clave (n\\xFAmero de columnas)\",value:key,onChange:e=>setKey(e.target.value),style:{padding:\"10px\",width:\"300px\",fontSize:\"16px\"}})}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:\"20px\"},children:[/*#__PURE__*/_jsx(Button,{onClick:()=>handleAction(true),variant:\"contained\",color:\"primary\",style:{marginRight:\"10px\"},children:\"Cifrar Mensaje\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>handleAction(false),variant:\"contained\",color:\"secondary\",children:\"Descifrar Mensaje\"})]}),/*#__PURE__*/_jsx(\"text\",{children:\"Mensaje Cifrado / Descifrado\"}),outputMessage&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:\"20px\"},children:[/*#__PURE__*/_jsx(\"textarea\",{readOnly:true,value:outputMessage,style:{width:\"300px\",height:\"100px\",padding:\"10px\",fontSize:\"16px\",resize:\"none\",border:\"1px solid #ccc\",borderRadius:\"4px\",marginBottom:\"10px\"}}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Button,{onClick:handleCopy,variant:\"contained\",children:\"Copiar\"})})]})]});};export{CifradoEscitala};","map":{"version":3,"names":["useState","Button","toast","jsx","_jsx","jsxs","_jsxs","CifradoEscitala","message","setMessage","key","setKey","outputMessage","setOutputMessage","escitalaCipher","str","numColumns","isEncrypting","spaceIndexes","normalizedMessage","i","length","push","numRows","Math","ceil","transformedMessage","col","row","index","decryptedArr","Array","from","colLength","floor","extraChars","charsInColumn","join","spaceIndex","slice","handleAction","trim","error","parsedKey","parseInt","isNaN","result","success","handleCopy","navigator","clipboard","writeText","style","padding","textAlign","children","marginBottom","type","placeholder","value","onChange","e","target","width","fontSize","onClick","variant","color","marginRight","marginTop","readOnly","height","resize","border","borderRadius"],"sources":["C:/Users/Luis Ibarra/Documents/Tareas/Seguridad informatica/webCifrado/cifrado/src/CifradoEscitala.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Button from '@mui/material/Button';\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst CifradoEscitala = () => {\r\n    const [message, setMessage] = useState(''); // Estado para el mensaje ingresado\r\n    const [key, setKey] = useState(1); // Estado para la clave (número de columnas)\r\n    const [outputMessage, setOutputMessage] = useState(''); // Estado para el mensaje cifrado o descifrado\r\n\r\n    // Función para aplicar el Cifrado Escítala\r\n    const escitalaCipher = (str, numColumns, isEncrypting) => {\r\n        const spaceIndexes = [];\r\n        let normalizedMessage = '';\r\n\r\n        // Recorrer el mensaje y separar los espacios\r\n        for (let i = 0; i < str.length; i++) {\r\n            if (str[i] === ' ') {\r\n                spaceIndexes.push(i); // Guardar las posiciones de los espacios\r\n            } else {\r\n                normalizedMessage += str[i]; // Construir mensaje sin espacios\r\n            }\r\n        }\r\n\r\n        const numRows = Math.ceil(normalizedMessage.length / numColumns);\r\n        let transformedMessage = '';\r\n\r\n        if (isEncrypting) {\r\n        // Cifrar (Escribir por filas, leer por columnas)\r\n        for (let col = 0; col < numColumns; col++) {\r\n            for (let row = 0; row < numRows; row++) {\r\n                const index = row * numColumns + col;\r\n                if (index < normalizedMessage.length) {\r\n                    transformedMessage += normalizedMessage[index];\r\n                }\r\n            }\r\n        }\r\n        } else {\r\n        // Descifrar (Escribir por columnas, leer por filas)\r\n        const decryptedArr = Array.from({ length: numRows }, () => \"\");\r\n        const colLength = Math.floor(normalizedMessage.length / numColumns);\r\n        const extraChars = normalizedMessage.length % numColumns;\r\n\r\n        let index = 0;\r\n        for (let col = 0; col < numColumns; col++) {\r\n            const charsInColumn = col < extraChars ? colLength + 1 : colLength;\r\n            for (let row = 0; row < charsInColumn; row++) {\r\n                if (index < normalizedMessage.length) {\r\n                    decryptedArr[row] += normalizedMessage[index];\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n        transformedMessage = decryptedArr.join('');\r\n        }\r\n\r\n        // Insertar los espacios de vuelta en las posiciones originales\r\n        for (let spaceIndex of spaceIndexes) {\r\n            transformedMessage = [transformedMessage.slice(0, spaceIndex), ' ', transformedMessage.slice(spaceIndex)].join('');\r\n        }\r\n\r\n        return transformedMessage;\r\n    };\r\n\r\n    // Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\r\n    const handleAction = (isEncrypting) => {\r\n        if (!message.trim()) {\r\n            toast.error(\"El mensaje no puede estar vacío\");\r\n            return;\r\n        }\r\n\r\n        const parsedKey = parseInt(key, 10);\r\n        if (isNaN(parsedKey) || parsedKey < 1) {\r\n            toast.error(\"La clave debe ser un número mayor que 0\");\r\n            return;\r\n        }\r\n\r\n        const result = escitalaCipher(message, parsedKey, isEncrypting);\r\n        setOutputMessage(result);\r\n        toast.success(isEncrypting ? \"Mensaje cifrado correctamente!\" : \"Mensaje descifrado correctamente!\");\r\n    };\r\n\r\n    const handleCopy = () => {\r\n        if (!outputMessage) {\r\n            toast.error(\"No hay mensaje para copiar\");\r\n            return;\r\n        }\r\n        navigator.clipboard.writeText(outputMessage);\r\n        toast.success('Mensaje copiado correctamente!');\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: \"20px\", textAlign: \"center\" }}>\r\n            <h1>Cifrado Escítala</h1>\r\n            <text>Ingresa el mensaje: </text>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Ej: Hola\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <text>Ingresa el numero de columnas: </text>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"Clave (número de columnas)\"\r\n                    value={key}\r\n                    onChange={(e) => setKey(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <Button\r\n                    onClick={() => handleAction(true)}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{ marginRight: \"10px\" }}\r\n                >\r\n                    Cifrar Mensaje\r\n                </Button>\r\n                <Button\r\n                    onClick={() => handleAction(false)}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                >\r\n                    Descifrar Mensaje\r\n                </Button>\r\n            </div>\r\n            <text>Mensaje Cifrado / Descifrado</text>\r\n            {outputMessage && (\r\n                <div style={{ marginTop: \"20px\" }}>\r\n                    <textarea\r\n                        readOnly\r\n                        value={outputMessage}\r\n                        style={{\r\n                        width: \"300px\",\r\n                        height: \"100px\",\r\n                        padding: \"10px\",\r\n                        fontSize: \"16px\",\r\n                        resize: \"none\",\r\n                        border: \"1px solid #ccc\",\r\n                        borderRadius: \"4px\",\r\n                        marginBottom: \"10px\", \r\n                        }}\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            onClick={handleCopy}\r\n                            variant=\"contained\"\r\n                        >\r\n                            Copiar\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { CifradoEscitala };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}