{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luis Ibarra\\\\Documents\\\\Tareas\\\\Seguridad informatica\\\\webCifrado\\\\cifrado\\\\src\\\\CifradoEscitala.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CifradoEscitala = () => {\n  _s();\n  const [message, setMessage] = useState(''); // Estado para el mensaje ingresado\n  const [key, setKey] = useState(1); // Estado para la clave (número de columnas)\n  const [outputMessage, setOutputMessage] = useState(''); // Estado para el mensaje cifrado o descifrado\n\n  // Función para aplicar el Cifrado Escítala\n  const escitalaCipher = (str, numColumns, isEncrypting) => {\n    const normalizedMessage = str.replace(/\\s+/g, \"\"); // Quitar espacios del mensaje\n    const numRows = Math.ceil(normalizedMessage.length / numColumns);\n    if (isEncrypting) {\n      // Cifrar (Escribir por filas, leer por columnas)\n      let encryptedMessage = '';\n      for (let col = 0; col < numColumns; col++) {\n        for (let row = 0; row < numRows; row++) {\n          const index = row * numColumns + col;\n          if (index < normalizedMessage.length) {\n            encryptedMessage += normalizedMessage[index];\n          }\n        }\n      }\n      return encryptedMessage;\n    } else {\n      // Descifrar (Escribir por columnas, leer por filas)\n      const decryptedArr = Array.from({\n        length: numRows\n      }, () => \"\");\n      const colLength = Math.floor(normalizedMessage.length / numColumns);\n      const extraChars = normalizedMessage.length % numColumns;\n      let index = 0;\n      for (let col = 0; col < numColumns; col++) {\n        const charsInColumn = col < extraChars ? colLength + 1 : colLength;\n        for (let row = 0; row < charsInColumn; row++) {\n          if (index < normalizedMessage.length) {\n            decryptedArr[row] += normalizedMessage[index];\n            index++;\n          }\n        }\n      }\n      return decryptedArr.join('');\n    }\n  };\n\n  // Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\n  const handleAction = isEncrypting => {\n    const result = escitalaCipher(message, parseInt(key, 10), isEncrypting);\n    setOutputMessage(result);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cifrado Esc\\xEDtala\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      children: \"Ingresa el mensaje: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Ej: Hola\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      children: \"Ingresa el numero de columnas: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Clave (n\\xFAmero de columnas)\",\n        value: key,\n        onChange: e => setKey(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAction(true),\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          marginRight: \"10px\"\n        },\n        children: \"Cifrar Mensaje\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAction(false),\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\"\n        },\n        children: \"Descifrar Mensaje\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), outputMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: outputMessage ? \"Resultado:\" : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        children: outputMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(CifradoEscitala, \"wDApLyBrWDJ1LMUF2d+SNuPSkGI=\");\n_c = CifradoEscitala;\nexport { CifradoEscitala };\nvar _c;\n$RefreshReg$(_c, \"CifradoEscitala\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","CifradoEscitala","_s","message","setMessage","key","setKey","outputMessage","setOutputMessage","escitalaCipher","str","numColumns","isEncrypting","normalizedMessage","replace","numRows","Math","ceil","length","encryptedMessage","col","row","index","decryptedArr","Array","from","colLength","floor","extraChars","charsInColumn","join","handleAction","result","parseInt","style","padding","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","type","placeholder","value","onChange","e","target","width","fontSize","onClick","marginRight","marginTop","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/Luis Ibarra/Documents/Tareas/Seguridad informatica/webCifrado/cifrado/src/CifradoEscitala.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst CifradoEscitala = () => {\r\n    const [message, setMessage] = useState(''); // Estado para el mensaje ingresado\r\n    const [key, setKey] = useState(1); // Estado para la clave (número de columnas)\r\n    const [outputMessage, setOutputMessage] = useState(''); // Estado para el mensaje cifrado o descifrado\r\n\r\n    // Función para aplicar el Cifrado Escítala\r\n    const escitalaCipher = (str, numColumns, isEncrypting) => {\r\n        const normalizedMessage = str.replace(/\\s+/g, \"\"); // Quitar espacios del mensaje\r\n        const numRows = Math.ceil(normalizedMessage.length / numColumns);\r\n\r\n        if (isEncrypting) {\r\n            // Cifrar (Escribir por filas, leer por columnas)\r\n            let encryptedMessage = '';\r\n            for (let col = 0; col < numColumns; col++) {\r\n                for (let row = 0; row < numRows; row++) {\r\n                    const index = row * numColumns + col;\r\n                    if (index < normalizedMessage.length) {\r\n                        encryptedMessage += normalizedMessage[index];\r\n                    }\r\n                }\r\n            }\r\n            return encryptedMessage;\r\n        } else {\r\n            // Descifrar (Escribir por columnas, leer por filas)\r\n            const decryptedArr = Array.from({ length: numRows }, () => \"\");\r\n            const colLength = Math.floor(normalizedMessage.length / numColumns);\r\n            const extraChars = normalizedMessage.length % numColumns;\r\n            \r\n            let index = 0;\r\n            for (let col = 0; col < numColumns; col++) {\r\n                const charsInColumn = col < extraChars ? colLength + 1 : colLength;\r\n                for (let row = 0; row < charsInColumn; row++) {\r\n                    if (index < normalizedMessage.length) {\r\n                        decryptedArr[row] += normalizedMessage[index];\r\n                        index++;\r\n                    }\r\n                }\r\n            }\r\n            return decryptedArr.join('');\r\n        }\r\n    };\r\n\r\n    // Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\r\n    const handleAction = (isEncrypting) => {\r\n        const result = escitalaCipher(message, parseInt(key, 10), isEncrypting);\r\n        setOutputMessage(result);\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: \"20px\", textAlign: \"center\" }}>\r\n            <h1>Cifrado Escítala</h1>\r\n            <text>Ingresa el mensaje: </text>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Ej: Hola\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <text>Ingresa el numero de columnas: </text>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"Clave (número de columnas)\"\r\n                    value={key}\r\n                    onChange={(e) => setKey(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <button\r\n                    onClick={() => handleAction(true)}\r\n                    style={{ padding: \"10px 20px\", fontSize: \"16px\", marginRight: \"10px\" }}\r\n                >\r\n                    Cifrar Mensaje\r\n                </button>\r\n                <button\r\n                    onClick={() => handleAction(false)}\r\n                    style={{ padding: \"10px 20px\", fontSize: \"16px\" }}\r\n                >\r\n                    Descifrar Mensaje\r\n                </button>\r\n            </div>\r\n            {outputMessage && (\r\n                <div style={{ marginTop: \"20px\" }}>\r\n                    <h3>{outputMessage ? \"Resultado:\" : \"\"}</h3>\r\n                    <p style={{ fontSize: \"18px\", fontWeight: \"bold\" }}>{outputMessage}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { CifradoEscitala };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}