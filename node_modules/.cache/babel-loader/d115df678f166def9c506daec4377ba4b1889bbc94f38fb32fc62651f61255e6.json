{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luis Ibarra\\\\Documents\\\\Tareas\\\\Seguridad informatica\\\\webCifrado\\\\cifrado\\\\src\\\\CifradoEscitala.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CifradoEscitala = () => {\n  _s();\n  const [message, setMessage] = useState(''); // Estado para el mensaje ingresado\n  const [key, setKey] = useState(1); // Estado para la clave (número de columnas)\n  const [outputMessage, setOutputMessage] = useState(''); // Estado para el mensaje cifrado o descifrado\n  const [isEncrypting, setIsEncrypting] = useState(true); // Estado para controlar si se cifra o descifra\n\n  // Función para aplicar el Cifrado Escítala\n  const escitalaCipher = (str, numColumns, isEncrypting) => {\n    const normalizedMessage = str.replace(/\\s+/g, \"\"); // Quitar espacios del mensaje\n    const numRows = Math.ceil(normalizedMessage.length / numColumns);\n    if (isEncrypting) {\n      // Cifrar (Escribir por filas, leer por columnas)\n      let encryptedMessage = '';\n      for (let col = 0; col < numColumns; col++) {\n        for (let row = 0; row < numRows; row++) {\n          const index = row * numColumns + col;\n          if (index < normalizedMessage.length) {\n            encryptedMessage += normalizedMessage[index];\n          }\n        }\n      }\n      return encryptedMessage;\n    } else {\n      // Descifrar (Escribir por columnas, leer por filas)\n      const decryptedArr = Array.from({\n        length: numRows\n      }, () => \"\");\n      let index = 0;\n      for (let col = 0; col < numColumns; col++) {\n        for (let row = 0; row < numRows; row++) {\n          if (index < normalizedMessage.length) {\n            decryptedArr[row] += normalizedMessage[index];\n            index++;\n          }\n        }\n      }\n      return decryptedArr.join('');\n    }\n  };\n\n  // Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\n  const handleAction = () => {\n    const result = escitalaCipher(message, parseInt(key, 10), isEncrypting);\n    setOutputMessage(result);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cifrado Esc\\xEDtala\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Ingresa el mensaje\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Clave (n\\xFAmero de columnas)\",\n        value: key,\n        onChange: e => setKey(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEncrypting(true);\n          handleAction();\n        },\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          marginRight: \"10px\"\n        },\n        children: \"Cifrar Mensaje\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsEncrypting(false);\n          handleAction();\n        },\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\"\n        },\n        children: \"Descifrar Mensaje\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), outputMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: isEncrypting ? \"Mensaje Cifrado:\" : \"Mensaje Descifrado:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: \"18px\",\n          fontWeight: \"bold\"\n        },\n        children: outputMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(CifradoEscitala, \"c9Pn9IsjScHk1NUSfNGY4FEl6CU=\");\n_c = CifradoEscitala;\nexport { CifradoEscitala };\nvar _c;\n$RefreshReg$(_c, \"CifradoEscitala\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","CifradoEscitala","_s","message","setMessage","key","setKey","outputMessage","setOutputMessage","isEncrypting","setIsEncrypting","escitalaCipher","str","numColumns","normalizedMessage","replace","numRows","Math","ceil","length","encryptedMessage","col","row","index","decryptedArr","Array","from","join","handleAction","result","parseInt","style","padding","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","type","placeholder","value","onChange","e","target","width","fontSize","onClick","marginRight","marginTop","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/Luis Ibarra/Documents/Tareas/Seguridad informatica/webCifrado/cifrado/src/CifradoEscitala.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst CifradoEscitala = () => {\r\n  const [message, setMessage] = useState(''); // Estado para el mensaje ingresado\r\n  const [key, setKey] = useState(1); // Estado para la clave (número de columnas)\r\n  const [outputMessage, setOutputMessage] = useState(''); // Estado para el mensaje cifrado o descifrado\r\n  const [isEncrypting, setIsEncrypting] = useState(true); // Estado para controlar si se cifra o descifra\r\n\r\n  // Función para aplicar el Cifrado Escítala\r\n  const escitalaCipher = (str, numColumns, isEncrypting) => {\r\n    const normalizedMessage = str.replace(/\\s+/g, \"\"); // Quitar espacios del mensaje\r\n    const numRows = Math.ceil(normalizedMessage.length / numColumns);\r\n    \r\n    if (isEncrypting) {\r\n      // Cifrar (Escribir por filas, leer por columnas)\r\n      let encryptedMessage = '';\r\n      for (let col = 0; col < numColumns; col++) {\r\n        for (let row = 0; row < numRows; row++) {\r\n          const index = row * numColumns + col;\r\n          if (index < normalizedMessage.length) {\r\n            encryptedMessage += normalizedMessage[index];\r\n          }\r\n        }\r\n      }\r\n      return encryptedMessage;\r\n    } else {\r\n      // Descifrar (Escribir por columnas, leer por filas)\r\n      const decryptedArr = Array.from({ length: numRows }, () => \"\");\r\n      let index = 0;\r\n      for (let col = 0; col < numColumns; col++) {\r\n        for (let row = 0; row < numRows; row++) {\r\n          if (index < normalizedMessage.length) {\r\n            decryptedArr[row] += normalizedMessage[index];\r\n            index++;\r\n          }\r\n        }\r\n      }\r\n      return decryptedArr.join('');\r\n    }\r\n  };\r\n\r\n  // Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\r\n  const handleAction = () => {\r\n    const result = escitalaCipher(message, parseInt(key, 10), isEncrypting);\r\n    setOutputMessage(result);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", textAlign: \"center\" }}>\r\n      <h1>Cifrado Escítala</h1>\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Ingresa el mensaje\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n        />\r\n      </div>\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Clave (número de columnas)\"\r\n          value={key}\r\n          onChange={(e) => setKey(e.target.value)}\r\n          style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n        />\r\n      </div>\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <button\r\n          onClick={() => {\r\n            setIsEncrypting(true);\r\n            handleAction();\r\n          }}\r\n          style={{ padding: \"10px 20px\", fontSize: \"16px\", marginRight: \"10px\" }}\r\n        >\r\n          Cifrar Mensaje\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            setIsEncrypting(false);\r\n            handleAction();\r\n          }}\r\n          style={{ padding: \"10px 20px\", fontSize: \"16px\" }}\r\n        >\r\n          Descifrar Mensaje\r\n        </button>\r\n      </div>\r\n      {outputMessage && (\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <h3>{isEncrypting ? \"Mensaje Cifrado:\" : \"Mensaje Descifrado:\"}</h3>\r\n          <p style={{ fontSize: \"18px\", fontWeight: \"bold\" }}>{outputMessage}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CifradoEscitala };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}