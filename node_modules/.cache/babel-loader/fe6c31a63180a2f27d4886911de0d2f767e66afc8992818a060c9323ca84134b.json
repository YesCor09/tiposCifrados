{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luis Ibarra\\\\Documents\\\\Tareas\\\\Seguridad informatica\\\\webCifrado\\\\cifrado\\\\src\\\\CifradoEscitala.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Button from '@mui/material/Button';\nimport { Toaster } from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CifradoEscitala = () => {\n  _s();\n  const [message, setMessage] = useState(''); // Estado para el mensaje ingresado\n  const [key, setKey] = useState(1); // Estado para la clave (número de columnas)\n  const [outputMessage, setOutputMessage] = useState(''); // Estado para el mensaje cifrado o descifrado\n\n  // Función para aplicar el Cifrado Escítala\n  const escitalaCipher = (str, numColumns, isEncrypting) => {\n    const spaceIndexes = [];\n    let normalizedMessage = '';\n\n    // Recorrer el mensaje y separar los espacios\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === ' ') {\n        spaceIndexes.push(i); // Guardar las posiciones de los espacios\n      } else {\n        normalizedMessage += str[i]; // Construir mensaje sin espacios\n      }\n    }\n    const numRows = Math.ceil(normalizedMessage.length / numColumns);\n    let transformedMessage = '';\n    if (isEncrypting) {\n      // Cifrar (Escribir por filas, leer por columnas)\n      for (let col = 0; col < numColumns; col++) {\n        for (let row = 0; row < numRows; row++) {\n          const index = row * numColumns + col;\n          if (index < normalizedMessage.length) {\n            transformedMessage += normalizedMessage[index];\n          }\n        }\n      }\n    } else {\n      // Descifrar (Escribir por columnas, leer por filas)\n      const decryptedArr = Array.from({\n        length: numRows\n      }, () => \"\");\n      const colLength = Math.floor(normalizedMessage.length / numColumns);\n      const extraChars = normalizedMessage.length % numColumns;\n      let index = 0;\n      for (let col = 0; col < numColumns; col++) {\n        const charsInColumn = col < extraChars ? colLength + 1 : colLength;\n        for (let row = 0; row < charsInColumn; row++) {\n          if (index < normalizedMessage.length) {\n            decryptedArr[row] += normalizedMessage[index];\n            index++;\n          }\n        }\n      }\n      transformedMessage = decryptedArr.join('');\n    }\n\n    // Insertar los espacios de vuelta en las posiciones originales\n    for (let spaceIndex of spaceIndexes) {\n      transformedMessage = [transformedMessage.slice(0, spaceIndex), ' ', transformedMessage.slice(spaceIndex)].join('');\n    }\n    return transformedMessage;\n  };\n\n  // Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\n  const handleAction = isEncrypting => {\n    const result = escitalaCipher(message, parseInt(key, 10), isEncrypting);\n    setOutputMessage(result);\n  };\n  const handleCopy = () => {\n    navigator.clipboard.writeText(outputMessage);\n    /*#__PURE__*/_jsxDEV(Toaster, {\n      position: \"top-center\",\n      reverseOrder: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cifrado Esc\\xEDtala\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      children: \"Ingresa el mensaje: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Ej: Hola\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      children: \"Ingresa el numero de columnas: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Clave (n\\xFAmero de columnas)\",\n        value: key,\n        onChange: e => setKey(e.target.value),\n        style: {\n          padding: \"10px\",\n          width: \"300px\",\n          fontSize: \"16px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAction(true),\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          marginRight: \"10px\"\n        },\n        children: \"Cifrar Mensaje\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAction(false),\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\"\n        },\n        children: \"Descifrar Mensaje\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      children: \"Mensaje Cifrado / Descifrado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), outputMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        readOnly: true,\n        value: outputMessage,\n        style: {\n          width: \"300px\",\n          height: \"100px\",\n          padding: \"10px\",\n          fontSize: \"16px\",\n          resize: \"none\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          marginBottom: \"10px\" // Espacio entre el texto y el botón\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCopy,\n          variant: \"contained\",\n          children: \"Copiar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(CifradoEscitala, \"wDApLyBrWDJ1LMUF2d+SNuPSkGI=\");\n_c = CifradoEscitala;\nexport { CifradoEscitala };\nvar _c;\n$RefreshReg$(_c, \"CifradoEscitala\");","map":{"version":3,"names":["useState","Button","Toaster","jsxDEV","_jsxDEV","CifradoEscitala","_s","message","setMessage","key","setKey","outputMessage","setOutputMessage","escitalaCipher","str","numColumns","isEncrypting","spaceIndexes","normalizedMessage","i","length","push","numRows","Math","ceil","transformedMessage","col","row","index","decryptedArr","Array","from","colLength","floor","extraChars","charsInColumn","join","spaceIndex","slice","handleAction","result","parseInt","handleCopy","navigator","clipboard","writeText","position","reverseOrder","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","textAlign","children","marginBottom","type","placeholder","value","onChange","e","target","width","fontSize","onClick","marginRight","marginTop","readOnly","height","resize","border","borderRadius","variant","_c","$RefreshReg$"],"sources":["C:/Users/Luis Ibarra/Documents/Tareas/Seguridad informatica/webCifrado/cifrado/src/CifradoEscitala.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Button from '@mui/material/Button';\r\nimport { Toaster } from \"react-hot-toast\";\r\n\r\nconst CifradoEscitala = () => {\r\n    const [message, setMessage] = useState(''); // Estado para el mensaje ingresado\r\n    const [key, setKey] = useState(1); // Estado para la clave (número de columnas)\r\n    const [outputMessage, setOutputMessage] = useState(''); // Estado para el mensaje cifrado o descifrado\r\n\r\n    // Función para aplicar el Cifrado Escítala\r\n    const escitalaCipher = (str, numColumns, isEncrypting) => {\r\n        const spaceIndexes = [];\r\n        let normalizedMessage = '';\r\n\r\n        // Recorrer el mensaje y separar los espacios\r\n        for (let i = 0; i < str.length; i++) {\r\n            if (str[i] === ' ') {\r\n                spaceIndexes.push(i); // Guardar las posiciones de los espacios\r\n            } else {\r\n                normalizedMessage += str[i]; // Construir mensaje sin espacios\r\n            }\r\n        }\r\n\r\n        const numRows = Math.ceil(normalizedMessage.length / numColumns);\r\n        let transformedMessage = '';\r\n\r\n        if (isEncrypting) {\r\n            // Cifrar (Escribir por filas, leer por columnas)\r\n            for (let col = 0; col < numColumns; col++) {\r\n                for (let row = 0; row < numRows; row++) {\r\n                    const index = row * numColumns + col;\r\n                    if (index < normalizedMessage.length) {\r\n                        transformedMessage += normalizedMessage[index];\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // Descifrar (Escribir por columnas, leer por filas)\r\n            const decryptedArr = Array.from({ length: numRows }, () => \"\");\r\n            const colLength = Math.floor(normalizedMessage.length / numColumns);\r\n            const extraChars = normalizedMessage.length % numColumns;\r\n\r\n            let index = 0;\r\n            for (let col = 0; col < numColumns; col++) {\r\n                const charsInColumn = col < extraChars ? colLength + 1 : colLength;\r\n                for (let row = 0; row < charsInColumn; row++) {\r\n                    if (index < normalizedMessage.length) {\r\n                        decryptedArr[row] += normalizedMessage[index];\r\n                        index++;\r\n                    }\r\n                }\r\n            }\r\n            transformedMessage = decryptedArr.join('');\r\n        }\r\n\r\n        // Insertar los espacios de vuelta en las posiciones originales\r\n        for (let spaceIndex of spaceIndexes) {\r\n            transformedMessage = [transformedMessage.slice(0, spaceIndex), ' ', transformedMessage.slice(spaceIndex)].join('');\r\n        }\r\n\r\n        return transformedMessage;\r\n    };\r\n\r\n    // Función que se ejecuta al hacer clic en el botón de cifrar o descifrar\r\n    const handleAction = (isEncrypting) => {\r\n        const result = escitalaCipher(message, parseInt(key, 10), isEncrypting);\r\n        setOutputMessage(result);\r\n    };\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(outputMessage);\r\n        <Toaster\r\n            position=\"top-center\"\r\n            reverseOrder={false}\r\n        />\r\n    };\r\n\r\n    return (\r\n        <div style={{ padding: \"20px\", textAlign: \"center\" }}>\r\n            <h1>Cifrado Escítala</h1>\r\n            <text>Ingresa el mensaje: </text>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Ej: Hola\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <text>Ingresa el numero de columnas: </text>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"Clave (número de columnas)\"\r\n                    value={key}\r\n                    onChange={(e) => setKey(e.target.value)}\r\n                    style={{ padding: \"10px\", width: \"300px\", fontSize: \"16px\" }}\r\n                />\r\n            </div>\r\n            <div style={{ marginBottom: \"20px\" }}>\r\n                <button\r\n                    onClick={() => handleAction(true)}\r\n                    style={{ padding: \"10px 20px\", fontSize: \"16px\", marginRight: \"10px\" }}\r\n                >\r\n                    Cifrar Mensaje\r\n                </button>\r\n                <button\r\n                    onClick={() => handleAction(false)}\r\n                    style={{ padding: \"10px 20px\", fontSize: \"16px\" }}\r\n                >\r\n                    Descifrar Mensaje\r\n                </button>\r\n            </div>\r\n            <text>Mensaje Cifrado / Descifrado</text>\r\n            {outputMessage && (\r\n                <div style={{ marginTop: \"20px\" }}>\r\n                    <textarea\r\n                        readOnly\r\n                        value={outputMessage}\r\n                        style={{\r\n                            width: \"300px\",\r\n                            height: \"100px\",\r\n                            padding: \"10px\",\r\n                            fontSize: \"16px\",\r\n                            resize: \"none\",\r\n                            border: \"1px solid #ccc\",\r\n                            borderRadius: \"4px\",\r\n                            marginBottom: \"10px\", // Espacio entre el texto y el botón\r\n                        }}\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            onClick={handleCopy}\r\n                            variant=\"contained\"\r\n                        >\r\n                            Copiar\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { CifradoEscitala };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}